name: Build

concurrency:
  group: ${{github.workflow}}-${{github.event.pull_request.number || github.ref}}
  cancel-in-progress: true

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  id-token: write
  pages: write

jobs:
  linux-qt6:
    name: Linux / Qt 6.9.1
    runs-on: ubuntu-22.04
    env:
      # Workaround for what's probably a false positive introduced when updating to 6.9.1
      CXXFLAGS: -Wno-error=array-bounds
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup CMake
        uses: ./.github/actions/cmake
        with:
          use_qt6: ON
          modules: qtserialport qtwebsockets qtnetworkauth
          additional_cmake_args: -DCMAKE_INSTALL_PREFIX='${{github.workspace}}/install/usr'

      - name: Create AppImage
        uses: ./.github/actions/appimage
        with:
          use_qt6: ON

  linux-qt5:
    name: Linux / Qt 5.15.2
    runs-on: ubuntu-24.04
    env:
      CXXFLAGS: -Wno-stringop-overflow
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup CMake
        uses: ./.github/actions/cmake
        with:
          qt_version: 5.15.2
          qt_arch: gcc_64
          use_qt6: OFF
          modules: ""
          additional_cmake_args: -DCMAKE_INSTALL_PREFIX='${{github.workspace}}/install/usr'

      - name: Create AppImage
        uses: ./.github/actions/appimage
        with:
          use_qt6: OFF

  windows-qt6:
    name: Windows / Qt 6.9.1
    runs-on: windows-2025
    env:
      # Workaround for what's probably a false positive introduced when updating to 6.9.1
      CXXFLAGS: -Wno-error=array-bounds
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup MinGW cache
        uses: actions/cache@v4
        with:
          key: x86_64-13.1.0-release-posix-seh-msvcrt-rt_v11-rev1.7z
          path: ${{github.workspace}}/x86_64-13.1.0-release-posix-seh-msvcrt-rt_v11-rev1.7z

      - name: Install MinGW
        # WinMain apps fail to link with the default MinGW compiler on GH actions. I suspect it is because Qt (since
        # 6.8) uses msvcrt, but GH Actions uses the ucrt version. Furthermore, GH Actions might have an older MinGW
        # version which might make things even less compatible. I don't know the exact reasoning. This works, and that's
        # all that matters for me.
        run: |
          MINGW_FILE_NAME='x86_64-13.1.0-release-posix-seh-msvcrt-rt_v11-rev1.7z'
          if ! [[ -f '${{github.workspace}}'/"$MINGW_FILE_NAME" ]]; then
            curl -L "https://github.com/niXman/mingw-builds-binaries/releases/download/13.1.0-rt_v11-rev1/$MINGW_FILE_NAME" -o '${{github.workspace}}'/"$MINGW_FILE_NAME"
          fi
          7z x '${{github.workspace}}'/"$MINGW_FILE_NAME"
          echo 'CC=${{github.workspace}}/mingw64/bin/gcc.exe' >> "$GITHUB_ENV"
          echo 'CXX=${{github.workspace}}/mingw64/bin/g++.exe' >> "$GITHUB_ENV"
        shell: bash

      - name: 'Install Inno Setup'
        run: |
          choco install innosetup -y

      - name: Setup CMake
        uses: ./.github/actions/cmake
        with:
          qt_arch: win64_mingw
          use_qt6: ON
          modules: qtserialport qtwebsockets qtnetworkauth
          additional_cmake_args: -DCMAKE_INSTALL_PREFIX='${{github.workspace}}/install'

      - name: Build
        run: cmake --build '${{github.workspace}}/build' --parallel "$(nproc)"

      - name: Install
        run: cmake --install '${{github.workspace}}/build'

      - name: Run windeployqt
        run: windeployqt -networkauth -websockets -serialport '${{github.workspace}}/install/bin/shvspy.exe'

      - name: Copy MinGW runtime libraries
        # windeployqt is unable to copy those, because it looks for them next to where g++.exe is. On the GitHub runner,
        # they are in a different directory.
        run: cp "${{github.workspace}}"/mingw64/bin/{libstdc++-6.dll,libgcc_s_seh-1.dll,libwinpthread-1.dll} '${{github.workspace}}/install/bin'
        shell: bash

      - name: Get app version
        run: echo "VERSION=$(grep APP_VERSION shvspy/src/appversion.h | cut -d\" -f2)" >> "$GITHUB_ENV"
        shell: bash

      - name: Create installer
        run: iscc "-DBUILD_DIR=${{github.workspace}}/install" "-DVERSION=${{env.VERSION}}" shvspy/shvspy.iss

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: shvspy-${{env.VERSION}}-setup.exe
          path: ${{github.workspace}}/install/_inno/shvspy/shvspy-*-setup.exe

  wasm-qt6:
    name: WebAssembly / Qt 6.9.1
    runs-on: ubuntu-24.04
    env:
      emsdk_cache_dir: "emsdk-cache"
      emscripten_version: 3.1.70
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup emsdk cache
        uses: actions/cache@v4
        with:
          key: emsdk-cache-${{env.emscripten_version}}
          path: ${{env.emsdk_cache_dir}}

      - uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.emscripten_version}}
          actions-cache-folder: ${{env.emsdk_cache_dir}}

      - name: Setup CMake
        uses: ./.github/actions/cmake
        with:
          qt_arch: wasm_singlethread
          qt_target: wasm
          use_qt6: ON
          modules: qtwebsockets

      - name: Build
        run: cmake --build '${{github.workspace}}/build' --parallel "$(nproc)"
        shell: bash

      - name: Consolidate WebAssembly artifacts
        run: |
          mkdir gh-sources
          cp '${{github.workspace}}'/build/shvspy/*.{js,wasm,html} gh-sources/
          mv gh-sources/shvspy.html gh-sources/index.html
          cp '${{github.workspace}}'/distro/shvspy.AppDir/shvspy.svg gh-sources/qtlogo.svg
        shell: bash

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-sources/'

  deploy-github-pages:
    name: Deploy GitHub Pages
    if: github.ref == 'refs/heads/master'
    needs: [wasm-qt6]
    runs-on: ubuntu-24.04
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  create-nightly-release:
    name: Create nightly
    if: github.ref == 'refs/heads/master'
    needs: [linux-qt6, linux-qt5, windows-qt6, wasm-qt6]
    runs-on: ubuntu-24.04
    steps:
      - name: Consolidate artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Rename artifacts
        run: |
          mv artifact.tar shvspy-wasm-nightly.tar
          mv shvspy-*-setup.exe shvspy-nightly-setup.exe
          mv shvspy-qt5-*-x86_64.AppImage shvspy-qt5-nightly-x86_64.AppImage
          mv shvspy-qt6-*-x86_64.AppImage shvspy-qt6-nightly-x86_64.AppImage

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: Nightly
          tag_name: nightly
          fail_on_unmatched_files: true
          body: |
            The latest and greatest ShvSpy.

            This is a nightly release. If you find any bugs, please report them to the repository's issue tracker.
          files: |
             shvspy-*

  nix:
    name: NixOS / Qt 6.6.2
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build
        run: nix --experimental-features 'nix-command flakes' build -L "git+file://$(pwd)?submodules=1&rev=$(git rev-parse HEAD)"

      - name: Flake check
        run: nix --experimental-features 'nix-command flakes' flake check "git+file://$(pwd)?submodules=1&rev=$(git rev-parse HEAD)"

      - name: Format
        run: nix --experimental-features 'nix-command flakes' fmt && git diff --exit-code
