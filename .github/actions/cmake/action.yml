name: Setup CMake
description: "Invoke CMake and generate build files"
inputs:
  qt_version:
    description: "Specify Qt version to use"
    required: true
    default: "6.8.2"
  qt_arch:
    description: "Specify Qt arch to use"
    default: "linux_gcc_64"
  qt_target:
    description: "Specify Qt version to use"
    default: "desktop"
  use_qt6:
    description: "Specify whether we're using Qt 5 or Qt 6"
    required: true
  modules:
    description: "Specify which modules should be installed"
    required: true
  additional_cmake_args:
    description: "Additional args to pass to CMake"
    default: ""

runs:
  using: "composite"
  steps:
    # Linux deps
    - name: Install apt packages
      if: runner.os != 'Windows'
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: ninja-build libgl1-mesa-dev libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xinerama0 libxkbcommon-x11-0 libxcb-cursor-dev clazy libfuse-dev
        version: 1.0

    # Windows deps
    - name: Install windows deps
      if: runner.os == 'Windows'
      run: |
        # https://github.com/microsoft/vcpkg/issues/41199#issuecomment-2378255699
        export SystemDrive="$SYSTEMDRIVE"
        export SystemRoot="$SYSTEMROOT"
        export windir="$WINDIR"
        echo cmake_extra_args="'-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake' '-DMINGW=ON' '-G MinGW Makefiles'" >> "$GITHUB_ENV"
      shell: bash

    # Qt
    - name: Install Qt
      uses: Kidev/install-qt-action@v4.4.2 # Needed for WASM
      with:
        cache: true
        aqtversion: ">=3.2.0"
        host: ${{inputs.qt_target == 'wasm' && 'all_os' || null}}
        version: ${{inputs.qt_version}}
        arch: ${{inputs.qt_arch}}
        install-deps: false
        modules: ${{inputs.modules}}
        target: ${{inputs.qt_target}}
        extra: --autodesktop

    - name: MinGW-specific stuff
      if: inputs.qt_arch == 'win64_mingw'
      run: |
        QT_DIR="$(dirname "${QT_ROOT_DIR}")"
        CMAKE_BIN="${QT_DIR}/mingw_64/bin/qt-cmake.bat"
        chmod +x "${CMAKE_BIN}"
        echo CMAKE_BIN="${CMAKE_BIN}" >> "$GITHUB_ENV"
      shell: bash

    - name: WASM-specific stuff
      if: inputs.qt_arch == 'wasm_singlethread'
      run: |
        QT_DIR="$(dirname "${QT_ROOT_DIR}")"
        CMAKE_BIN="${QT_DIR}/wasm_singlethread/bin/qt-cmake"
        chmod +x "${CMAKE_BIN}"
        echo CMAKE_BIN="${CMAKE_BIN}" >> "$GITHUB_ENV"
        echo cmake_extra_args="'-DBUILD_SHARED_LIBS=OFF' '-DQT_HOST_PATH=$(realpath "${QT_DIR}/gcc_64")'" >> "$GITHUB_ENV"
      shell: bash

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.12
      with:
        key: ${{github.job}}

    - name: Configure CMake
      run: |
        CFLAGS="${CFLAGS}" \
        CXXFLAGS="${CXXFLAGS}" \
        "${CMAKE_BIN:-cmake}" \
          -S '${{github.workspace}}' \
          -B '${{github.workspace}}/build' \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTING=OFF \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DSHVSPY_USE_QT6=${{inputs.use_qt6}} \
          -DSHVSPY_WITH_WERROR=ON \
          ${{env.cmake_extra_args}} \
          ${{inputs.additional_cmake_args}}
      shell: bash
